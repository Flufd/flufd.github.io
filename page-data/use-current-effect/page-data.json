{"componentChunkName":"component---src-templates-blog-post-js","path":"/use-current-effect/","webpackCompilationHash":"","result":{"data":{"site":{"siteMetadata":{"title":"Development blog of Stewart Parry","author":"Stewart Parry"}},"markdownRemark":{"id":"128a9cec-db05-5de4-a3c4-71fd76041fe0","excerpt":"If you have read Dan Abramov’s blog post “A complete guide to useEffect” you may have seen this method of tracking if an effect has been cancelled, in order to…","html":"<p>If you have read Dan Abramov’s blog post “A complete guide to useEffect” you may have seen this method of tracking if an effect has been cancelled, in order to avoid race conditions.\n<a href=\"https://overreacted.io/a-complete-guide-to-useeffect/#speaking-of-race-conditions\">https://overreacted.io/a-complete-guide-to-useeffect/#speaking-of-race-conditions</a>\nThis pattern also helps use to determine if a component has been unmounted, because the clean up function will be called on unmount, and so helps to avoid warnings such as “Can’t perform a React state update on an unmounted component.”</p>\n<p>This technique works, however I thought that it should be something that was built into the useEffect hook itself. I set about creating a custom hook that had a similar api to the regular <code class=\"language-text\">useEffect</code> hook, but had this functionality built in.</p>\n<p>The <code class=\"language-text\">useEffect</code> hook takes a single parameterless function as the first argument. We can use this fact to our advantage, as any user of <code class=\"language-text\">useEffect</code> would not be using the arguments list. We can pass in the <code class=\"language-text\">didCancel</code> parameter to the effect.</p>\n<p>This is how I want it to look:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Article</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>article<span class=\"token punctuation\">,</span> setArticle<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">useCancelledEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">didCancel</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t  <span class=\"token keyword\">const</span> article <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchArticle</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>didCancel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">setArticle</span><span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t  <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So here is the (nieve) implementation:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useCancelledEffect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">effect<span class=\"token punctuation\">,</span> deps</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">let</span> didCancel <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// Call the effect, passing the didCancel bool to be used by the effect</span>\n\t\t<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span>didCancel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\tdidCancel <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>One issue here is that as the boolean is a primitive type, it will be passed by value to the effect, so when we mutate the <code class=\"language-text\">didCancel</code> variable in the clean up, it’s value will not be reflected inside the effect when the asyncronous effect continues.</p>\n<p>/**\nWe can overcome this by creating an object, which will be passed by reference.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useEffect3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">effect<span class=\"token punctuation\">,</span> deps</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">let</span> effectState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> didCancel<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// Call the effect, passing the didCancel bool to be used by the effect</span>\n\t\t<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span>effectState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\teffectState<span class=\"token punctuation\">.</span>didCancel <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And use it like this…</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token function\">useEffect3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">effectState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t  <span class=\"token keyword\">const</span> article <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchArticle</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>effectState<span class=\"token punctuation\">.</span>didCancel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">setArticle</span><span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t  <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Okay, now the object will be passed through and the pattern works correctly. However we need to be careful to access the state using dot notation, and not make a copy of the <code class=\"language-text\">didCancel</code> parameter. This will actually happen if we try to destructure the parameter as <code class=\"language-text\">useEffect3(({didCancel}) =&gt; ...</code> because that is essentially going to create a copy of the value, scoped to the function.</p>\n<p>*//</p>\n<p>We can fix this by having the hook take a function parameter that returns the didCancel instead of the boolean itself. I’m also going to flip the boolean so that it is true by default and call is <code class=\"language-text\">current</code> instead of cancelled.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useCurrentEffect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">effect<span class=\"token punctuation\">,</span> deps</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">let</span> isCurrent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">checkCurrent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> isCurrent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// Call the effect, passing the checkCancel function to be used by the effect</span>\n\t\t<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span>checkCurrent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\tdidCancel <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token function\">useCurrentEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isCurrent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t  <span class=\"token keyword\">const</span> article <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchArticle</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isCurrent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">setArticle</span><span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t  <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"Avoiding useEffect race conditions with a custom hook","date":"October 09, 2019","description":"A description"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/use-current-effect/","previous":null,"next":null}}}